{"version":3,"sources":["../tmp/ts/gaf.js"],"names":[],"mappings":"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","file":"gaf.js","sourcesContent":["\"use strict\";\nrequire('source-map-support').install();\nconst assert = require('assert');\nconst fs = require('fs');\nconst path = require('path');\nconst zlib = require('zlib');\nconst mkdirp = require('mkdirp');\nconst palette = require('./palette');\nconst PNG = require('pngjs').PNG;\nfunction constant(str) {\n    return str.charCodeAt(0) |\n        (str.charCodeAt(1) << 8) |\n        (str.charCodeAt(2) << 16) |\n        (str.charCodeAt(3) << 24);\n}\nconst options = require('yargs')\n    .usage('$0 <cmd> [args]')\n    .option('verbose', {\n    alias: 'v',\n    describe: 'Verbose output',\n    default: false,\n})\n    .option('trace', {\n    describe: 'Print stack trace on error',\n    default: false,\n})\n    .help('help')\n    .argv;\nfor (let file of options._) {\n    // try {\n    const resolved_name = path.resolve(process.cwd(), file);\n    const source = fs.readFileSync(resolved_name);\n    const basename = path.join(path.dirname(file), path.basename(file, path.extname(file)));\n    console.log(resolved_name);\n    for (let { name, frames } of gaf(source)) {\n        const out_name = path.resolve(process.cwd(), path.join(basename, name));\n        console.log(`${out_name} [${frames.length}]`);\n    }\n}\nfunction* gaf(buffer) {\n    const version = buffer.readUInt32LE(0);\n    const count = buffer.readUInt32LE(4);\n    const unknown = buffer.readUInt32LE(8);\n    assert(version == 0x00010100);\n    for (let i = 0, offset = 12; i < count; ++i, offset += 4) {\n        const entry_offset = buffer.readUInt32LE(offset);\n        yield* frames(buffer, entry_offset);\n    }\n}\nexports.gaf = gaf;\nfunction* frames(buffer, offset) {\n    const frame_count = buffer.readUInt16LE(offset);\n    const unknown1 = buffer.readUInt16LE(offset + 2);\n    const unknown2 = buffer.readUInt16LE(offset + 4);\n    let name = buffer.toString('ascii', offset + 8, offset + 40);\n    const name_length = name.indexOf('\\0');\n    if (name_length != -1)\n        name = name.substr(0, name_length);\n    offset += 40;\n    const frames = [];\n    for (let i = 0; i < frame_count; ++i, offset += 8) {\n        const frame_offset = buffer.readUInt32LE(offset);\n        const unknown3 = buffer.readUInt32LE(offset + 4);\n        frames.push(frame(buffer, frame_offset));\n    }\n    yield { name, frames };\n}\nfunction frame(buffer, offset) {\n    const width = buffer.readUInt16LE(offset);\n    const height = buffer.readUInt16LE(offset + 2);\n    const xpos = buffer.readUInt16LE(offset + 4);\n    const ypos = buffer.readUInt16LE(offset + 6);\n    const unknown1 = buffer[offset + 8];\n    const compressed = buffer[offset + 9];\n    const subframe_count = buffer.readUInt16LE(offset + 10);\n    const unknown2 = buffer.readUInt32LE(offset + 12);\n    const data_offset = buffer.readUInt32LE(offset + 16);\n    const unknown3 = buffer.readUInt16LE(offset + 20);\n    const unknown4 = buffer.readUInt16LE(offset + 22);\n    const unknown5 = buffer.readUInt32LE(offset + 20);\n    const pixels = Buffer.alloc(width * height * 4);\n    if (subframe_count == 0 && !compressed) {\n        const data = buffer.slice(data_offset, data_offset + width * height);\n        for (let i = 0; i < data.length; ++i) {\n            const c = data[i] * 4;\n            pixels[i * 4 + 0] = palette[c + 0];\n            pixels[i * 4 + 1] = palette[c + 1];\n            pixels[i * 4 + 2] = palette[c + 2];\n            pixels[i * 4 + 3] = palette[c + 3];\n        }\n        return { width, height, data: pixels };\n    }\n    else if (subframe_count == 0 && compressed) {\n        const data = buffer.slice(data_offset);\n        for (let y = 0, p = 0; y < height; ++y) {\n            const count = data.readUInt16LE(p);\n            // console.log(count);\n            p += 2;\n            const e = p + count;\n            for (let x = 0; p < e;) {\n                const mask = data[p++];\n                if ((mask & 0x01) == 0x01)\n                    x += mask >>> 1;\n                else if ((mask & 0x02) == 0x02) {\n                    const c = data[p++] * 4;\n                    const l = (mask >>> 2) + 1;\n                    for (let j = 0; j < l; ++j, ++x) {\n                        pixels[y * width * 4 + x * 4 + 0] = palette[c + 0];\n                        pixels[y * width * 4 + x * 4 + 1] = palette[c + 1];\n                        pixels[y * width * 4 + x * 4 + 2] = palette[c + 2];\n                        pixels[y * width * 4 + x * 4 + 3] = palette[c + 3];\n                    }\n                }\n                else {\n                    const l = (mask >>> 2) + 1;\n                    for (let j = 0; j < l; ++j, ++x) {\n                        const c = data[p++] * 4;\n                        pixels[y * width * 4 + x * 4 + 0] = palette[c + 0];\n                        pixels[y * width * 4 + x * 4 + 1] = palette[c + 1];\n                        pixels[y * width * 4 + x * 4 + 2] = palette[c + 2];\n                        pixels[y * width * 4 + x * 4 + 3] = palette[c + 3];\n                    }\n                }\n            }\n        }\n        return { width, height, data: pixels };\n    }\n    throw new Error('Unsupported format');\n}\nfunction write_png(file, image) {\n    const img = new PNG({ width: image.width, height: image.height });\n    img.data = image.data;\n    fs.writeFileSync(file, PNG.sync.write(img));\n}\n//# sourceMappingURL=gaf.js.map"]}