{"version":3,"sources":["../tmp/ts/fbi.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;eAGU,M;;AAFV,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,SAAU,MAAV,CAAiB,MAAjB;AAAA,QACQ,MADR,EACqB,IADrB,EACkC,GADlC,kFAEa,EAFb;;AAAA;AAAA;AAAA;AAAA;AACQ,0BADR,GACiB,EADjB,EACqB,IADrB,GAC4B,IAD5B,EACkC,GADlC,GACwC,IADxC;AAAA;AAAA;AAAA;AAAA;AAAA,2DAEmB,MAFnB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEa,sBAFb;;AAAA,0BAGY,MAAM,GAAN,IAAa,CAAC,GAH1B;AAAA;AAAA;AAAA;;AAIY,0BAAM,GAAN;AAJZ;AAAA;;AAAA;AAAA,0BAKiB,MAAM,GAAN,IAAa,OAAO,GALrC;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAMkB,EAAE,MAAM,SAAR,EAAmB,MAAM,OAAO,IAAP,EAAzB,EANlB;;AAAA;AAOY,6BAAS,EAAT;AACA,0BAAM,IAAN;AARZ;AAAA;;AAAA;AAAA,0BAUiB,MAAM,GAAN,IAAa,CAAC,GAV/B;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,0BAWiB,MAAM,GAAN,IAAa,CAAC,GAX/B;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAYkB,EAAE,MAAM,OAAR,EAZlB;;AAAA;AAAA;AAAA;;AAAA;AAAA,0BAaiB,MAAM,GAAN,IAAa,CAAC,GAb/B;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAckB,EAAE,MAAM,KAAR,EAAe,MAAM,OAAO,IAAP,EAArB,EAdlB;;AAAA;AAeY,6BAAS,EAAT;AACA,0BAAM,GAAN;AAhBZ;AAAA;;AAAA;AAAA,0BAkBiB,MAAM,GAAN,IAAa,OAAO,GAlBrC;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAmBkB,EAAE,MAAM,OAAR,EAAiB,MAAM,MAAvB,EAnBlB;;AAAA;AAoBY,6BAAS,EAAT;AACA,0BAAM,IAAN;AArBZ;AAAA;;AAAA;AAAA,0BAuBiB,MAAM,GAAN,IAAa,QAAQ,GAArB,IAA4B,CAAC,GAvB9C;AAAA;AAAA;AAAA;;AAwBY,0BAAM,GAAN;AAxBZ;AAAA;;AAAA;AAAA,0BAyBiB,MAAM,IAAN,IAAc,OAAO,GAzBtC;AAAA;AAAA;AAAA;;AAAA;AAAA,2BA0BkB,EAAE,MAAM,SAAR,EAAmB,MAAM,OAAO,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAzB,EA1BlB;;AAAA;AA2BY,6BAAS,EAAT;AACA,0BAAM,IAAN;AA5BZ;AAAA;;AAAA;AAAA,0BA8BiB,MAAM,GAAN,IAAa,QAAQ,GAArB,IAA4B,CAAC,GA9B9C;AAAA;AAAA;AAAA;;AA+BY,0BAAM,GAAN;AA/BZ;AAAA;;AAAA;AAAA,0BAgCiB,MAAM,GAAN,IAAa,QAAQ,GAArB,IAA4B,OAAO,GAhCpD;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAiCkB,EAAE,MAAM,SAAR,EAAmB,MAAM,OAAO,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,EAAoB,IAApB,EAAzB,EAjClB;;AAAA;AAkCY,6BAAS,EAAT;AACA,0BAAM,IAAN;AAnCZ;AAAA;;AAAA;AAqCa,wBAAI,OAAO,CAAC,KAAK,IAAL,CAAU,EAAV,CAAZ,EACD,UAAU,EAAV;;AAtCZ;AAuCQ,2BAAO,EAAP;;AAvCR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA,SAAS,KAAT,CAAe,MAAf,QAA8D;AAAA,4BAArC,OAAqC;AAAA,QAArC,OAAqC,gCAA3B,KAA2B;AAAA,6BAApB,QAAoB;AAAA,QAApB,QAAoB,iCAAT,KAAS;;AAC1D,QAAM,SAAS,EAAf;QAAmB,QAAQ,CAAC,MAAD,CAA3B;AACA,QAAI,KAAK,MAAT;QAAiB,MAAM,IAAvB;AAF0D;AAAA;AAAA;;AAAA;AAG1D,yDAAgB,OAAO,MAAP,CAAhB,iHAAgC;AAAA,gBAAvB,GAAuB;;AAC5B,oBAAQ,IAAI,IAAZ;AACI,qBAAK,SAAL;AAAgB;AACZ,8BAAM,IAAN,CAAW,EAAX;AACA,6BAAK,GAAG,IAAI,IAAP,IAAe,EAApB;AACA;AACH;AACD,qBAAK,KAAL;AACI,0BAAM,IAAI,IAAV;AACA;AACJ,qBAAK,OAAL;AAAc;AACV,4BAAM,QAAQ,MAAM,IAAI,IAAV,IAAkB,IAAI,IAAtB,GAA6B,IAAI,MAAJ,CAAW,IAAI,IAAf,CAA3C;AACA,4BAAI,OAAO,EAAX,EACI,QAAQ,IAAR,CAAgB,GAAhB;AACJ,2BAAG,GAAH,IAAU,KAAV;AACA;AACH;AACD,qBAAK,OAAL;AACI,yBAAK,MAAM,GAAN,EAAL;AACA;AACJ,qBAAK,SAAL;AAAgB;AACZ,4BAAI,QAAJ,EAAc;AACV,gCAAI,EAAE,cAAc,MAAhB,CAAJ,EACI,OAAO,UAAP,IAAqB,EAArB;AACJ,mCAAO,UAAP,EAAmB,IAAnB,CAAwB,IAAI,IAA5B;AACH;AACD;AACH;AACD;AAAS;AA3Bb;AA6BH;AAjCyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkC1D,WAAO,MAAP;AACH;AACD,QAAQ,KAAR,GAAgB,KAAhB;AACA,CAAC,SAAS,IAAT,GAAgB;AACb,QAAM,UAAU,QAAQ,OAAR,EACX,KADW,CACL,6BADK,EAEX,MAFW,CAEJ,SAFI,EAEO;AACnB,eAAO,GADY;AAEnB,iBAAS,KAFU;AAGnB,iBAAS;AAHU,KAFP,EAOX,MAPW,CAOJ,UAPI,EAOQ;AACpB,iBAAS,KADW;AAEpB,iBAAS,IAFW;AAGpB,qBAAa;AAHO,KAPR,EAYX,MAZW,CAYJ,cAZI,EAYY;AACxB,eAAO,CAAC,IAAD,CADiB;AAExB,iBAAS,KAFe;AAGxB,iBAAS;AAHe,KAZZ,EAiBX,MAjBW,CAiBJ,sBAjBI,EAiBoB;AAChC,iBAAS,CADuB;AAEhC,gBAAQ;AAFwB,KAjBpB,EAqBX,MArBW,CAqBJ,CArBI,EAsBX,IAtBW,CAsBN,MAtBM,EAuBX,IAvBL;AAwBA,QAAM,QAAQ,QAAQ,CAAtB;AACA,QAAM,WAAW,EAAjB;AACA,QAAM,WAAW,EAAjB;AA3Ba;AAAA;AAAA;;AAAA;AA4Bb,yDAAiB,KAAjB,iHAAwB;AAAA,gBAAf,IAAe;;AACpB,gBAAI,QAAQ,OAAZ,EACI,QAAQ,GAAR,CAAY,IAAZ;AACJ,gBAAM,SAAS,GAAG,YAAH,CAAgB,IAAhB,EAAsB,EAAE,UAAU,QAAZ,EAAtB,EAA8C,IAA9C,EAAf;AACA,gBAAM,OAAO,MAAM,MAAN,EAAc,OAAd,CAAb;AACA,gBAAI,QAAQ,iBAAR,GAA4B,CAAhC,EAAmC;AAC/B,oBAAM,QAAQ,EAAd;AACA,qBAAK,IAAI,IAAI,CAAR,EAAW,IAAI,KAAK,OAAL,CAAa,IAAb,CAApB,EAAwC,IAAI,QAAQ,iBAApD,EAAuE,EAAE,CAAzE,EAA4E;AACxE,0BAAM,OAAN,CAAc,KAAK,QAAL,CAAc,CAAd,CAAd;AACA,wBAAI,KAAK,OAAL,CAAa,CAAb,CAAJ;AACH;AACD,oBAAI,OAAO,QAAX;AAN+B;AAAA;AAAA;;AAAA;AAO/B,qEAAiB,KAAjB,iHAAwB;AAAA,4BAAf,KAAe;;AACpB,4BAAI,EAAE,SAAQ,IAAV,CAAJ,EACI,OAAO,KAAK,KAAL,IAAa,EAApB,CADJ,KAGI,OAAO,KAAK,KAAL,CAAP;AACP;AAZ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa/B,oBAAM,OAAO,KAAK,QAAL,CAAc,IAAd,EAAoB,KAAK,OAAL,CAAa,IAAb,CAApB,CAAb;AACA,qBAAK,IAAL,IAAa,IAAb;AACH,aAfD,MAiBI,SAAS,IAAT,CAAc,IAAd;AACP;AAnDY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoDb,QAAM,SAAS,QAAQ,iBAAR,GAA4B,CAA5B,GAAgC,QAAhC,GAA2C,SAAS,MAAT,GAAkB,CAAlB,GAAsB,QAAtB,GAAiC,SAAS,CAAT,CAA3F;AACA,QAAM,OAAO,yBAAe,MAAf,EAAuB,IAAvB,EAA6B,QAAQ,EAAR,GAAa,CAAb,GAAiB,CAA9C,CAAb;AACA,YAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB;AACH,CAvDD","file":"fbi.js","sourcesContent":["\"use strict\";\nconst fs = require('fs');\nconst path = require('path');\nfunction* parser(source) {\n    let buffer = '', prev = null, tag = null;\n    for (let sc of source) {\n        if (sc == '[' && !tag)\n            tag = '[';\n        else if (sc == ']' && tag == '[') {\n            yield { type: 'section', data: buffer.trim() };\n            buffer = '';\n            tag = null;\n        }\n        else if (sc == '{' && !tag) { }\n        else if (sc == '}' && !tag)\n            yield { type: 'close' };\n        else if (sc == '=' && !tag) {\n            yield { type: 'key', data: buffer.trim() };\n            buffer = '';\n            tag = '=';\n        }\n        else if (sc == ';' && tag == '=') {\n            yield { type: 'value', data: buffer };\n            buffer = '';\n            tag = null;\n        }\n        else if (sc == '/' && prev == '/' && !tag)\n            tag = '/';\n        else if (sc == '\\n' && tag == '/') {\n            yield { type: 'comment', data: buffer.slice(1).trim() };\n            buffer = '';\n            tag = null;\n        }\n        else if (sc == '*' && prev == '/' && !tag)\n            tag = '*';\n        else if (sc == '/' && prev == '*' && tag == '*') {\n            yield { type: 'comment', data: buffer.slice(1, -1).trim() };\n            buffer = '';\n            tag = null;\n        }\n        else if (tag || !/\\s/.test(sc))\n            buffer += sc;\n        prev = sc;\n    }\n}\nfunction parse(source, { verbose = false, comments = false }) {\n    const result = {}, stack = [result];\n    let it = result, key = null;\n    for (let cmd of parser(source)) {\n        switch (cmd.type) {\n            case 'section': {\n                stack.push(it);\n                it = it[cmd.data] = {};\n                break;\n            }\n            case 'key':\n                key = cmd.data;\n                break;\n            case 'value': {\n                const value = isNaN(cmd.data) ? cmd.data : new Number(cmd.data);\n                if (key in it)\n                    console.warn(`${key} will be overwritten`);\n                it[key] = value;\n                break;\n            }\n            case 'close':\n                it = stack.pop();\n                break;\n            case 'comment': {\n                if (comments) {\n                    if (!('comments' in result))\n                        result['comments'] = [];\n                    result['comments'].push(cmd.data);\n                }\n                break;\n            }\n            default: break;\n        }\n    }\n    return result;\n}\nexports.parse = parse;\n(function main() {\n    const options = require('yargs')\n        .usage('Usage: $0 file... [options]')\n        .option('verbose', {\n        alias: 'v',\n        default: false,\n        boolean: true,\n    })\n        .option('comments', {\n        default: false,\n        boolean: true,\n        description: 'Collect comments into an array named \"comments\"',\n    })\n        .option('pretty-print', {\n        alias: ['pp'],\n        default: false,\n        boolean: true,\n    })\n        .option('use-filename-as-root', {\n        default: 0,\n        number: true,\n    })\n        .demand(1)\n        .help('help')\n        .argv;\n    const files = options._;\n    const arr_data = [];\n    const obj_data = {};\n    for (let file of files) {\n        if (options.verbose)\n            console.log(file);\n        const source = fs.readFileSync(file, { encoding: 'binary' }).trim();\n        const data = parse(source, options);\n        if (options.useFilenameAsRoot > 0) {\n            const names = [];\n            for (let i = 1, p = path.dirname(file); i < options.useFilenameAsRoot; ++i) {\n                names.unshift(path.basename(p));\n                p = path.dirname(p);\n            }\n            let node = obj_data;\n            for (let name of names) {\n                if (!(name in node))\n                    node = node[name] = {};\n                else\n                    node = node[name];\n            }\n            const name = path.basename(file, path.extname(file));\n            node[name] = data;\n        }\n        else\n            arr_data.push(data);\n    }\n    const result = options.useFilenameAsRoot > 0 ? obj_data : arr_data.length > 1 ? arr_data : arr_data[0];\n    const json = JSON.stringify(result, null, options.pp ? 2 : 0);\n    process.stdout.write(json);\n})();\n//# sourceMappingURL=fbi.js.map"]}